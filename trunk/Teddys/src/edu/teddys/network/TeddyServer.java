/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.teddys.network;

import com.jme3.network.ConnectionListener;
import com.jme3.network.HostedConnection;
import com.jme3.network.Server;
import edu.teddys.MegaLogger;
import edu.teddys.network.messages.NetworkMessage;
import edu.teddys.network.messages.NetworkMessageInfo;
import edu.teddys.network.messages.server.ReqMessageSendClientData;
import edu.teddys.objects.player.Player;
import edu.teddys.states.Game;
import edu.teddys.timer.ServerTimer;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.List;

/**
 *
 * @author cm
 */
public class TeddyServer implements NetworkCommunicatorAPI, ConnectionListener {

  /**
   * Autogenerated on demand.
   */
  private TeddyServerData data;
  private static TeddyServer instance;

  public static TeddyServer getInstance() {
    if (instance == null) {
      instance = new TeddyServer();
    }
    return instance;
  }

  /**
   * 
   * Start the server. Refresh the server data regarding creation timestamp
   * and discoverability in every case, even when the server is already
   * running.
   * 
   */
  public void startServer() {
    NetworkCommunicatorSpidermonkeyServer.getInstance().startServer(this);
    if (!isRunning()) {
      data = new TeddyServerData();
    }
    getData().setCreated(new Date());
    getData().setDiscoverable(true);
    ServerTimer.startTimer();
    MegaLogger.getLogger().debug("New server started.");
  }

  /**
   * 
   * Check if the server is currently running. That is when getData() returns
   * a non-null value.
   * 
   * @return true if the server is running, else false.
   */
  protected boolean isRunning() {
    if (data != null) {
      return true;
    }
    return false;
  }

  /**
   * This function safely stops the server.
   */
  public void stopServer() {
    if (!isRunning()) {
      return;
    }
    ServerTimer.stopTimer();
    NetworkCommunicatorSpidermonkeyServer.getInstance().shutdownServer();
    // reset data
    data = null;
    MegaLogger.getLogger().debug("Server stopped.");
  }

  public String getPubKey(String pubKeyClient) {
    return NetworkCommunicatorSpidermonkeyServer.getInstance().getPubKey(pubKeyClient);
  }

  public void send(NetworkMessage message) {
    if (!isRunning()) {
      return;
    }
    if (!getData().isDiscoverable()) {
      MegaLogger.getLogger().warn("TeddyServer not discoverable! Message not sent.");
    }
    //TODO check if a recipient field is available?
    
    message.setServerTimestamp(ServerTimer.getServerTimestamp());
    NetworkCommunicatorSpidermonkeyServer.getInstance().send(message);
  }

  public boolean join() {
    // dummy value
    return false;
  }

  /**
   * 
   * Call this function instead of disconnect(Integer) if you want to send
   * a reason for disconnecting. This is, for example, if a client gets
   * kicked.
   * 
   * @param client  Client ID
   * @param reason Reason for the disconnect
   */
  public void disconnect(Integer client, String reason) {
    if (!isRunning()) {
      return;
    }
    //TODO iterate over the connections
//    HostedConnection conn = getConnections().;
//    if (conn == null) {
//      return;
//    }
//    conn.close(reason);
    MegaLogger.getLogger().debug(String.format("The specified client (%d) has been disconnected yet.", client));
  }

  public void disconnect(Integer client) {
    disconnect(client, null);
  }

  public TeddyServerData getData() {
    return data;
  }

  public void setData(TeddyServerData data) {
    this.data = data;
  }

  public List<Integer> getClientIDs() {
    if (getData() != null && !getData().getClients().isEmpty()) {
      return new ArrayList<Integer>(getData().getClients().keySet());
    }
    return new ArrayList<Integer>();
  }

  /**
   * 
   * Return the client data specified by the ID in the current server context.
   * Note: Does not check if the entry exists!
   * 
   * @param id  Client id
   * @return Client data, i. e. the name, health, ...
   */
  public ClientData getClientData(Integer id) {
    return getData().getClients().get(id);
  }

  /**
   * Adds client data to the current list. Existing data will be overwritten!
   */
  public void setClientData(Integer clientID, ClientData client) {
    if (!isRunning()) {
      MegaLogger.getLogger().error(new Throwable("TeddyServer is not running! Could not set client data!"));
      return;
    }
    getData().getClients().put(clientID, client);
  }

  /**
   * 
   * Called when a new client has joined the server.
   * 
   * @param server
   * @param conn The client information.
   */
  public void connectionAdded(Server server, HostedConnection conn) {
    if (!isRunning()) {
      MegaLogger.getLogger().error(new Throwable("connectionAdded() called, but the server is not running actually (or not discoverable)!"));
      return;
    }

    // Initialize a new player
    Player.getInstance(conn.getId());
    
    // Send a status text
    String message = String.format(
            "New connection (%s) arrived! Client ID is %s",
            conn.getAddress(),
            conn.getId());
    
    NetworkMessageInfo info = new NetworkMessageInfo(message);
    TeddyServer.getInstance().send(info);
    MegaLogger.getLogger().info(message);
    
    String serverMsg = String.format("Welcome to %s!", getData().getName());
    NetworkMessageInfo clientInfo = new NetworkMessageInfo(serverMsg);
    TeddyServer.getInstance().send(clientInfo);
    
    // Request the client data
    ReqMessageSendClientData sendMsg = new ReqMessageSendClientData();
    TeddyServer.getInstance().send(sendMsg);
  }

  /**
   * 
   * Called when a client has been disconnected.
   * 
   * @param server
   * @param conn The client information.
   */
  public void connectionRemoved(Server server, HostedConnection conn) {

    if (!isRunning()) {
      MegaLogger.getLogger().error(new Throwable("connectionRemoved() called, but the server is not running (or not discoverable)!"));
      return;
    }

    if (conn == null) {
      // can be true if the server has been shutdown in the meantime.
      return;
    }

    MegaLogger.getLogger().debug("Connection with ID " + conn.getId() + " removed!");

    // check if the player exists in the current game
    Game.getInstance().removePlayerFromWorld(Player.getInstance(conn.getId()));

    // Now search the client data of the HostedConnection and remove it 
    // from list

    // acquire client data because of the team allocation
    if(!getData().getClients().isEmpty()) {
      ClientData client = getData().getClients().get(conn.getId());
      if (client != null) {
        // remove the player from the team list
        if (client.getTeamID() != null) {
          try {
            getData().getTeams().get(client.getTeamID()).removePlayer(client.getId());
          } catch (ArrayIndexOutOfBoundsException ex) {
            //TODO ignore?
            MegaLogger.getLogger().warn(
                    new Throwable(
                    String.format("No team with ID %d could be found!",
                    client.getTeamID()), ex));
          }
        }

        // remove the client data from server
        getData().getClients().remove(client.getId());
      }
    }

    String message = String.format(
            "Client %s disconnected.",
            conn.getId());
    //TODO necessary?
//    getConnections().remove(conn);
    NetworkMessageInfo info = new NetworkMessageInfo(message);
    send(info);
    MegaLogger.getLogger().info(message);
  }
  
  protected Collection<HostedConnection> getConnections() {
    return NetworkCommunicatorSpidermonkeyServer.getInstance().getConnections();
  }
}
