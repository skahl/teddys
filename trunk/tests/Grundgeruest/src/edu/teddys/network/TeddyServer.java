/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.teddys.network;

import com.jme3.network.ConnectionListener;
import com.jme3.network.HostedConnection;
import com.jme3.network.Server;
import edu.teddys.network.messages.NetworkMessage;
import edu.teddys.network.messages.NetworkMessageInfo;
import edu.teddys.network.messages.server.ReqMessageSendClientData;
import java.util.Date;

/**
 *
 * @author cm
 */
public class TeddyServer implements NetworkCommunicatorAPI, ConnectionListener {
  
  /**
   * Autogenerated on demand.
   */
  private TeddyServerData data;
  
  private static TeddyServer instance;
  
  public static TeddyServer getInstance() {
    if(instance == null) {
      instance = new TeddyServer();
    }
    return instance;
  }
  
  public void startServer() {
    NetworkCommunicatorSpidermonkeyServer.getInstance().startServer(this);
    data = new TeddyServerData();
    data.setCreated(new Date());
    data.setDiscoverable(true);
    //TODO check
//    data.setName("Todesangst");
    //TODO set game mode
  }
  
  /**
   * This function safely stops the server.
   */
  public void stopServer() {
    for(HostedConnection conn : getData().getConnections()) {
      conn.close("Going down for maintenance NOW! ;)");
    }
    NetworkCommunicatorSpidermonkeyServer.getInstance().shutdownServer();
    // reset data
    data = null;
  }
  
  public String getPubKey(String pubKeyClient) {
    return NetworkCommunicatorSpidermonkeyServer.getInstance().getPubKey(pubKeyClient);
  }

  public void send(NetworkMessage message) {
    if(getData() == null || !getData().isDiscoverable()) {
      System.err.println("TeddyServer not discoverable! Message not sent.");
    }
    if(getData().getConnections().isEmpty()) {
      //TODO Save or dismiss the message?
      System.out.println("Message could not be sent because no clients were connected!");
      return;
    }
    NetworkCommunicatorSpidermonkeyServer.getInstance().send(message);
  }

  public boolean join() {
    // dummy value
    return false;
  }

  /**
   * 
   * Call this function instead of disconnect(Integer) if you want to send
   * a reason for disconnecting. This is, for example, if a client gets
   * kicked.
   * 
   * @param client  Client ID
   * @param reason Reason for the disconnect
   */
  public void disconnect(Integer client, String reason) {
    HostedConnection conn = getData().getConnections().get(client);
    if(conn == null) {
      return;
    }
    conn.close(reason);
  }

  public void disconnect(Integer client) {
    HostedConnection conn = getData().getConnections().get(client);
    if(conn == null) {
      return;
    }
    conn.close(null);
  }

  protected TeddyServerData getData() {
    return data;
  }

  public void setData(TeddyServerData data) {
    this.data = data;
  }
  
  /**
   * Adds client data to the current list. Existing data will be overwritten!
   */
  public void setClientData(Integer clientID, TeddyClient client) {
    getData().getClients().put(clientID, client);
  }

  public void connectionAdded(Server server, HostedConnection conn) {
    getData().getConnections().add(conn);
    String message = String.format(
            "New connection (%s) arrived! Client ID is %s",
            conn.getAddress(),
            conn.getId());
    NetworkMessageInfo info = new NetworkMessageInfo(message);
    send(info);
    System.out.println(message);
    //TODO send the real name of the server
    String serverMsg = String.format("Welcome on my server %s!", "Grunute");
    NetworkMessageInfo clientInfo = new NetworkMessageInfo(serverMsg);
    conn.send(clientInfo);
    ReqMessageSendClientData sendMsg = new ReqMessageSendClientData();
    conn.send(sendMsg);
    //TODO add member to team
  }

  public void connectionRemoved(Server server, HostedConnection conn) {
    if(getData().getConnections().contains(conn)) {
      
      // Search for the client data of the HostedConnection and remove it 
      // from list
      //TODO check
      getData().getClients().remove(conn.getId());
      
      //TODO delete member from team
      
      String message = String.format(
              "Client %s committed suicide.",
              conn.getId());
      getData().getConnections().remove(conn);
      NetworkMessageInfo info = new NetworkMessageInfo(message);
      send(info);
      System.out.println(message);
      return;
    }
    System.err.println(
        String.format("Connection remove request failed from Address %s!",
        conn.getAddress()));
  }
  
}
